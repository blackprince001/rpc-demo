// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: eatery.proto

package eatery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EarteryClient is the client API for Eartery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EarteryClient interface {
	BuyGobe(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*MenuResponse, error)
}

type earteryClient struct {
	cc grpc.ClientConnInterface
}

func NewEarteryClient(cc grpc.ClientConnInterface) EarteryClient {
	return &earteryClient{cc}
}

func (c *earteryClient) BuyGobe(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*MenuResponse, error) {
	out := new(MenuResponse)
	err := c.cc.Invoke(ctx, "/eatery.eartery/BuyGobe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EarteryServer is the server API for Eartery service.
// All implementations must embed UnimplementedEarteryServer
// for forward compatibility
type EarteryServer interface {
	BuyGobe(context.Context, *MenuRequest) (*MenuResponse, error)
	mustEmbedUnimplementedEarteryServer()
}

// UnimplementedEarteryServer must be embedded to have forward compatible implementations.
type UnimplementedEarteryServer struct {
}

func (UnimplementedEarteryServer) BuyGobe(context.Context, *MenuRequest) (*MenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyGobe not implemented")
}
func (UnimplementedEarteryServer) mustEmbedUnimplementedEarteryServer() {}

// UnsafeEarteryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EarteryServer will
// result in compilation errors.
type UnsafeEarteryServer interface {
	mustEmbedUnimplementedEarteryServer()
}

func RegisterEarteryServer(s grpc.ServiceRegistrar, srv EarteryServer) {
	s.RegisterService(&Eartery_ServiceDesc, srv)
}

func _Eartery_BuyGobe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EarteryServer).BuyGobe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eatery.eartery/BuyGobe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EarteryServer).BuyGobe(ctx, req.(*MenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Eartery_ServiceDesc is the grpc.ServiceDesc for Eartery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Eartery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eatery.eartery",
	HandlerType: (*EarteryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuyGobe",
			Handler:    _Eartery_BuyGobe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eatery.proto",
}
